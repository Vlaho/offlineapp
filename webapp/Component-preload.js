sap.ui.require.preload({
	"sap/ui/demo/iconexplorer/Component.js": "sap.ui.define([\n        \"sap/ui/core/UIComponent\",\n        \"sap/ui/Device\",\n        \"test/offlineapp/model/models\",\n        \"sap/ui/model/odata/v2/ODataModel\"\n    ],\n    function (UIComponent,\n\tDevice,\n\tmodels,\n\tODataModel) {\n        \"use strict\";\n\n        return UIComponent.extend(\"test.offlineapp.Component\", {\n            metadata: {\n                manifest: \"json\"\n            },\n\n            /**\n             * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n             * @public\n             * @override\n             */\n            init: function () {\n                // call the base component's init function\n                UIComponent.prototype.init.apply(this, arguments);\n\n                // enable routing\n                this.getRouter().initialize();\n                this.getRouter().navTo(\"splashScreen\", {}, {}, true);\n\n                // set the device model\n                this.setModel(models.createDeviceModel(), \"device\");\n            }\n        });\n    }\n);",
	"sap/ui/demo/iconexplorer/controller/App.controller.js": "sap.ui.define(\n    [\n        \"sap/ui/core/mvc/Controller\"\n    ],\n    function(BaseController) {\n      \"use strict\";\n  \n      return BaseController.extend(\"test.offlineapp.controller.App\", {\n        onInit() {\n        }\n      });\n    }\n  );\n  ",
	"sap/ui/demo/iconexplorer/controller/BaseCotroller.controller.js": "sap.ui.define([\r\n\t\"sap/ui/core/mvc/Controller\",\r\n    \"sap/ui/core/UIComponent\"\r\n], function(\r\n\tController,\r\n    UIComponent\r\n) {\r\n\t\"use strict\";\r\n\r\n\treturn Controller.extend(\"test.offlineapp.controller.BaseCotroller\", {\r\n        getRouter() {\r\n            return UIComponent.getRouterFor(this);\r\n        }\r\n\t});\r\n});",
	"sap/ui/demo/iconexplorer/controller/Main.controller.js": "sap.ui.define([\r\n\t\"test/offlineapp/controller/BaseCotroller.controller\",\r\n\t\"sap/ui/model/odata/v2/ODataModel\"\r\n], function (\r\n\tBaseCotroller,\r\n\tODataModel\r\n) {\r\n\t\"use strict\";\r\n\r\n\treturn BaseCotroller.extend(\"test.offlineapp.controller.Main\", {\r\n\t\tonInit() {\r\n\t\t\tthis.getRouter().getRoute(\"main\").attachPatternMatched(this._onRouteMatched, this);\r\n\t\t},\r\n\r\n\t\t_onRouteMatched() {\r\n\t\t\tnew ODataModel(\"/V2/Northwind/Northwind.svc/\").read(\"/Customers\", {\r\n\t\t\t\tsuccess: (oData) => {\r\n\t\t\t\t\tthis.getView().setModel(new sap.ui.model.json.JSONModel(oData.results), \"customers\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tonSaveLocal() {\r\n\t\t\tif (!self.indexedDB) {\r\n\t\t\t\tconsole.log(\"This browser doesn't support IndexedDB.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst oCustomersModel = this.getView().getModel(\"customers\");\r\n\t\t\tconst request = self.indexedDB.open('EXAMPLE_DB', 1);\r\n\r\n\t\t\trequest.onupgradeneeded = (oEvent) => {\r\n\t\t\t\tconst oDB = oEvent.target.result;\r\n\t\t\t\tconst oObjectStore = oDB.createObjectStore(\"customers\", { keyPath: \"CustomerID\" });\r\n\r\n\t\t\t\toObjectStore.transaction.oncomplete = (oEvent) => {\r\n\t\t\t\t\tconst oCustomerObjectStore = oDB.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\trequest.onerror = (oEvent) => {\r\n\t\t\t\tconsole.log(\"Error: \" + oEvent.target.errorCode);\r\n\t\t\t};\r\n\r\n\t\t\trequest.onsuccess = (oEvent) => {\r\n\t\t\t\tconst oDB = oEvent.target.result;\r\n\t\t\t\tconst oCustomerObjectStore = oDB.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\r\n\t\t\t\toCustomerObjectStore.clear();\r\n\t\t\t\toCustomersModel.oData.forEach((oCustomer) => {\r\n\t\t\t\t\toCustomerObjectStore.put(oCustomer);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tonLoadLocal() {\r\n\t\t\tconst request = self.indexedDB.open('EXAMPLE_DB');\r\n\r\n\t\t\trequest.onsuccess = (oEvent) => {\r\n\t\t\t\tconst oDB = oEvent.target.result;\r\n\t\t\t\tconst oCustomerObjectStore = oDB.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\r\n\t\t\t\tconst oRequest = oCustomerObjectStore.getAll();\r\n\r\n\t\t\t\toRequest.onsuccess = (oEvent) => {\r\n\t\t\t\t\tthis.getView().setModel(new sap.ui.model.json.JSONModel(oEvent.target.result), \"customers\");\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n});",
	"sap/ui/demo/iconexplorer/controller/Splash.controller.js": "sap.ui.define([\n    \"test/offlineapp/controller/BaseCotroller.controller\",\n    \"sap/ui/model/json/JSONModel\"\n],\n    function (BaseCotroller,\n        JSONModel) {\n        \"use strict\";\n\n        return BaseCotroller.extend(\"test.offlineapp.controller.Splash\", {\n            onInit: function () {\n                this.getRouter().getRoute(\"splashScreen\").attachMatched(this._onRouteMatched, this);\n                this.getView().setModel(new JSONModel({\n                    pic: \"/images/Expertum_Logo_futuregreen_rgb.png\",\n                    height: (screen.height * 0.15) + \"px\"\n                }), \"img\");\n            },\n\n            _onRouteMatched: function () {\n                setTimeout(() => {\n                    this.getRouter().navTo(\"main\");\n                }, 3000);\n            }\n        });\n    });\n",
	"sap/ui/demo/iconexplorer/model/models.js": "sap.ui.define([\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/Device\"\n], \n    /**\n     * provide app-view type models (as in the first \"V\" in MVVC)\n     * \n     * @param {typeof sap.ui.model.json.JSONModel} JSONModel\n     * @param {typeof sap.ui.Device} Device\n     * \n     * @returns {Function} createDeviceModel() for providing runtime info for the device the UI5 app is running on\n     */\n    function (JSONModel, Device) {\n        \"use strict\";\n\n        return {\n            createDeviceModel: function () {\n                var oModel = new JSONModel(Device);\n                oModel.setDefaultBindingMode(\"OneWay\");\n                return oModel;\n        }\n    };\n});",
	"sap/ui/demo/iconexplorer/regsw.js": "// service worker registration\r\nif ('serviceWorker' in navigator) {\r\n\twindow.addEventListener('load', function () {\r\n\t\tnavigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n\t\t\tconsole.log('service worker successfully registered');\r\n\t\t});\r\n\t});\r\n}",
	"sap/ui/demo/iconexplorer/sw.js": "importScripts(\"utils/libs/ui5swlib.js\");\r\n\r\nself.worker.initFromManifest().then(() => {\r\n\tconsole.log(\"successfully initialized manifest\");\r\n});\r\n\r\nself.addEventListener(\"fetch\", (e) => {\r\n\tconsole.log(`[Service Worker] Fetching resource: ${e.request.url}`);\r\n\te.respondWith(\r\n\t\t(async () => {\r\n\t\t\tconst r = await caches.match(e.request);\r\n\t\t\tconsole.log(`[Service Worker] Fetching resource: ${e.request.url}`);\r\n\t\t\tif (r) {\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t\tconst response = await fetch(e.request);\r\n\t\t\tconst cache = await caches.open(cacheName);\r\n\t\t\tconsole.log(`[Service Worker] Caching new resource: ${e.request.url}`);\r\n\t\t\tcache.put(e.request, response.clone());\r\n\t\t\treturn response;\r\n\t\t})()\r\n\t);\r\n});",
	"sap/ui/demo/iconexplorer/utils/libs/ui5swlib.js": "(() => { \"use strict\"; var e = { d: (t, i) => { for (var s in i) e.o(i, s) && !e.o(t, s) && Object.defineProperty(t, s, { enumerable: !0, get: i[s] }) }, o: (e, t) => Object.prototype.hasOwnProperty.call(e, t), r: e => { \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(e, \"__esModule\", { value: !0 }) } }, t = {}; e.r(t), e.d(t, { CacheStrategyBase: () => E, addStrategy: () => b, enableLogging: () => R, init: () => j, initFromManifest: () => M, onClientMessage: () => x, sendToClient: () => _, status: () => v, strategies: () => C, version: () => I }); class i { constructor(e, t, i) { this.major = e, this.minor = t, this.fix = i, this._major, this._minor, this._fix } static validate(e) { if (\"number\" != typeof e) throw Error(\"Not a valid number given\") } asString() { return `${this.major}.${this.minor}.${this.fix}` } get major() { return this._major } get minor() { return this._minor } get fix() { return this._fix } set major(e) { i.validate(e), this._major = e } set minor(e) { i.validate(e), this._minor = e } set fix(e) { i.validate(e), this._fix = e } compare(e) { return this.major > e.major ? 1 : this.major < e.major ? -1 : this.minor > e.minor ? 1 : this.minor < e.minor ? -1 : this.fix > e.fix ? 1 : this.fix < e.fix ? -1 : 0 } static extractGroups(e) { const t = e.match(/(\\d+)\\.(\\d+)\\.(\\d+)/), i = t[1], s = t[2], r = t[3]; return { major: Number(i), minor: Number(s), fix: Number(r) } } } class s extends i { constructor(e, t, i, s, r) { super(e, t, i), this.prefix = s, this.delimiter = r || \"-\", this._prefix, this._delimiter } static fromStringWithDelimiter(e, t = \"-\") { const i = e.split(t); if (i.length < 2) throw Error(\"string does not include a delimiter\"); const r = i[1], n = i[0]; return s.fromString(r, n, t) } static fromString(e, t, i) { var { major: r, minor: n, fix: a } = super.extractGroups(e); return new s(r, n, a, t, i) } set delimiter(e) { if (\"string\" != typeof e) throw Error(\"Delimiter must be of type string\"); this._delimiter = e } get delimiter() { return this._delimiter } set prefix(e) { if (\"string\" != typeof e) throw Error(\"Prefix must be of type string\"); this._prefix = e } get prefix() { return this._prefix } compare(e) { if (this.prefix !== e.prefix) throw new Error(\"Comparing different types of prefixes\"); if (this.delimiter !== e.delimiter) throw new Error(\"Comparing different types of delimiters\"); return super.compare(e) } asString() { return `${this.prefix}${this.delimiter}${super.asString()}` } } const r = new Map; let n = !1; class a { debug() { n && console.debug.apply(this, arguments) } log() { n && console.log.apply(this, arguments) } error() { n && console.error.apply(this, arguments) } static enable() { n = !0 } static setlogger(e, t) { r.set(e, t) } static getLogger(e = \"default\") { const t = r.get(e); if (t) return t; const i = new a; return a.setlogger(e, i), i } } class o { static async create({ version: e }) { return await (new o).open({ version: e }) } static async cleanup(e) { a.getLogger().log(\"Clear outdated for current version: \" + e.asString()); const t = (await self.caches.keys()).filter((function (t) { a.getLogger().log(\"Cache: \" + t); try { return 0 !== s.fromStringWithDelimiter(t, e.delimiter).compare(e) } catch (e) { return !1 } })).map((function (e) { return a.getLogger().log(\"Delete: \" + e), self.caches.delete(e) })); return await Promise.all(t) } async open({ version: e }) { return this.cache = await self.caches.open(e), this } async get(e) { return await this.cache.match(e) } async truncate(e) { const t = e || await self.caches.keys(); return await Promise.all(t.map(self.caches.delete.bind(self.caches))), this } async put(e, t) { if (\"HEAD\" === e.method || \"POST\" === e.method) return this; const i = t.clone(); return await this.cache.put(e, i).catch((t => { console.log(`Failed to add request to cache (cause is logged on debug level): ${e.method} to ${e.url}`, \"You may want to consider adjusting stragtegy configuration to exclude this URLs in the first place\"), console.debug(\"Failed to add request to cache, error, request, response: \", t, e, i) })), this } async delete(e) { return await this.cache.delete(e), this } } class c { constructor(e) { this._version = void 0, this._matcher = e } get version() { return this._version } static isOffline() { return !navigator.onLine } matches(e) { return Array.isArray(this._matcher) ? this._matcher.includes(e) : this._matcher instanceof RegExp ? this._matcher.test(e) : \"function\" == typeof this._matcher ? this._matcher(e) : \"string\" == typeof this._matcher && e.startsWith(this._matcher) } async fetchVersion() { throw new Error(\"must be implemented by strategy\") } isInitialRequest(e) { throw new Error(\"must be implemented by strategy\") } async init() { this.cache ? c.isOffline() || await this.reinitialize() : (this._version = await this.fetchVersion(), this.cache = await o.create({ version: this.version.asString() })) } async reinitialize() { const e = this.version && this.version.asString(); this._version = await this.fetchVersion(), e !== this.version.asString() && (this.cache = await o.create({ version: this.version.asString() })), await o.cleanup(this.version) } async applyStrategy(e) { if (!(e && e instanceof self.Request)) throw new Error(\"request is required\"); const t = this.getCache(); return c.isOffline() ? await this.handleOffline(t, e) : await this.handleOnline(t, e) } async handleOnline(e, t) { if (\"only-if-cached\" === t.cache && \"same-origin\" !== t.mode) return; if (!e) return new self.Response(\"cache is undefined\"); let i = await e.get(t); return i || (i = await self.fetch(t), e.put(t, i)), i } async handleOffline(e, t) { return e ? await e.get(t) : new self.Response(\"<h1>Please ensure that you're online</h1>\") } getCache() { return this.cache } } class l { static async fetchManifest(e = \"manifest.json\") { const t = await self.fetch(e); return await t.json() } static async loadFromManifest(e = \"manifest.json\") { const t = await l.fetchManifest(e); return t[\"sap.app\"] && t[\"sap.app\"].serviceWorker ? t[\"sap.app\"].serviceWorker.config : [] } } class h extends c { constructor(e) { super(e.url), this.excludeRegExp = \"string\" == typeof e.exclude && new RegExp(e.exclude), this.rootUrl = e.manifestRootUrl || e.url, this.initialRequestEndings = e.initialRequestEndings || [\"/index.html\"] } matches(e) { return !(this.excludeRegExp && this.excludeRegExp.test(e)) && super.matches(e) } isInitialRequest(e) { return this.initialRequestEndings.some((t => e.endsWith(t))) } getVersionFromJson(e = {}) { const t = e[\"sap.app\"]; if (t && t.applicationVersion && t.applicationVersion.version) return s.fromString(t.applicationVersion.version, \"app\"); throw Error(\"Cannot get version from manifest\") } async fetchVersion() { const e = await l.fetchManifest(`${this.rootUrl}/manifest.json`); return this.getVersionFromJson(e) } } class u extends c { constructor(e) { super(e.url), this.rootUrl = e.url } isInitialRequest(e) { return e.endsWith(\"/sap-ui-core.js\") } async waitForVersionJSON(e) { const t = await self.fetch(`${e}/sap-ui-version.json`); return await t.json() } getVersionFromJson(e = {}) { return s.fromString(e.version, \"resources\") } async fetchVersion() { const e = await this.waitForVersionJSON(this.rootUrl); return this.getVersionFromJson(e) } } class g extends c { constructor(e) { super(e.url), this._isInitial = !0, this.name = e.name || \"STATIC\" } async fetchVersion() { return s.fromString(\"0.0.0\", this.name) } isInitialRequest(e) { return this._isInitial && (this._isInitial = !1), this._isInitial } } class f extends c { constructor(e) { super(e.url), this._isInitial = !0, this._timeInMs = e.timeInMs } async fetchVersion() { return s.fromString(\"0.0.0\", \"TIMED\") } isExpired() { return (new Date).getTime() - this.lastAccessTime < this._timeInMs } async handleOnline(e, t) { if (!e) return new self.Response(\"cache is undefined\"); let i = await e.get(t); return i && !this.isExpired() || (i = await self.fetch(t), e.put(t, i)), this.lastAccessTime = (new Date).getTime(), i } isInitialRequest(e) { return this._isInitial && (this._isInitial = !1), this._isInitial } } class p extends c { constructor(e) { super(e.url), this._isInitial = !0 } async fetchVersion() { return s.fromString(\"0.0.0\", \"NETWORKUPDATE\") } async handleOnline(e, t) { if (!e) return new self.Response(\"cache is undefined\"); let i = await e.get(t); return i ? self.fetch(t).then((i => { e.put(t, i) })) : (i = await self.fetch(t), e.put(t, i)), i } isInitialRequest(e) { return this._isInitial && (this._isInitial = !1), this._isInitial } } class d extends c { constructor(e) { super(e.urls), this.aUrls = e.urls, this.sVersion = e.version, this._isInitial = !0 } isInitialRequest(e) { return this._isInitial && (this._isInitial = !1), this._isInitial } async fetchVersion() { return s.fromString(this.sVersion, \"PRE\") } async init() { await super.init(); const e = this.aUrls.map((e => this.handleOnline(this.getCache(), e))); await Promise.all(e) } } class m { constructor() { this.strategies = [] } addStrategy(e) { e.priority = e.priority || 0, this.strategies.push(e), e.priority && this.strategies.sort(((e, t) => e.priority === t.priority ? 0 : t.priority > e.priority ? 1 : -1)) } static async ensureStrategyIsInitialized(e) { e._version || (a.getLogger().log(\"Strategy init called\"), await e.init()) } getStrategy(e) { return this.strategies.find((t => { if (t.matches(e)) return t })) } async applyStrategy(e) { const t = this.getStrategy(e.url); return t ? (t.isInitialRequest(e.url) && await t.init(), await m.ensureStrategyIsInitialized(t), t.applyStrategy(e)) : self.fetch(e) } static create() { return new m } } class y { constructor() { this.clientMessageHandler = void 0 } setClientMessageHandler(e) { a.getLogger().log(\"client message handler set\"), this.clientMessageHandler = e } async sentMessageToClient2(e, t) { return new Promise((function (i, s) { var r = new MessageChannel; r.port1.onmessage = function (e) { e.data.error ? s(e.data.error) : i(e.data) }, e.postMessage(\"SW Says: '\" + t + \"'\", [r.port2]) })) } async sendMessageToClient(e, t) { return e.postMessage({ msg: t }) } async sendMessageToAllClients(e) { const t = (await clients.matchAll()).map((t => this.sendMessageToClient(t, e))); return await Promise.all(t) } handleClientMessage(e, t) { this.clientMessageHandler ? this.clientMessageHandler(e, t) : a.getLogger().log(\"Unhandled Client message received: \" + e.data) } static create() { return new y } } const w = m.create(), S = y.create(), v = {}; self.addEventListener(\"install\", (e => { self.skipWaiting() })), self.addEventListener(\"activate\", (e => { self.clients.claim() })), self.addEventListener(\"fetch\", (e => { a.getLogger().log(\"FETCH \" + e.request.url), e.respondWith(async function () { try { const t = e.request; return await w.applyStrategy(t) } catch (e) { throw a.getLogger().error(\"Error in fetch: \", e), e } }()) })), self.addEventListener(\"message\", (e => { S.handleClientMessage(e, v) })); const x = S.setClientMessageHandler.bind(S), _ = S.sendMessageToAllClients.bind(S), b = w.addStrategy.bind(w), E = c, C = { CacheAllStrategy: g, UI5ResourceCacheStrategy: u, ApplicationCacheStrategy: h, PreCacheStrategy: d, CacheWithExpirationStrategy: f, CacheNetworkUpdateStrategy: p }, I = \"0.0.1\", M = async (e = {}) => { const t = await l.loadFromManifest(e.manifestUrl); await j(t) }, j = async e => { const t = e.map((e => { const t = Object.assign({}, e), i = t.type; if (!i) throw new Error('type not specified. Must be a function, an instance of CacheStrategyBase or one of [\"application\", \"ui5resource\", \"static\", \"precache\", \"networkupdate\"]'); let s; if (delete t.type, \"object\" == typeof i) s = i; else if (\"function\" == typeof i && i.constructor) s = new i(t); else if (\"string\" == typeof i) switch (i.toLowerCase()) { case \"application\": s = new h(t); break; case \"ui5resource\": s = new u(t); break; case \"static\": s = new g(t); break; case \"precache\": s = new d(t); break; case \"networkupdate\": s = new p(t); break; case \"expiration\": s = new f(t); break; default: throw new Error(`Cannot find strategy: ${i}. Allowed values are: [\"application\", \"ui5resource\", \"static\", \"precache\", \"networkupdate\"]`) }if (s instanceof E) return t.priority && (s.priority = t.priority), w.addStrategy(s), s.init(); throw new Error(\"Strategy must be of type CacheStrategyBase\") })); await Promise.all(t); const i = e.map((e => { if (\"string\" == typeof e.type) return e.type })); v.init = i }, R = () => { a.enable() }; self.worker = t })();",
	"sap/ui/demo/iconexplorer/utils/locate-reuse-libs.js": "/*eslint-disable semi, no-console*/\n(function (sap) {\n  var fioriToolsGetManifestLibs = function (manifestPath) {\n    var url = manifestPath;\n    var result = \"\";\n    // SAPUI5 delivered namespaces from https://ui5.sap.com/#/api/sap\n    var ui5Libs = [\n      \"sap.apf\",\n      \"sap.base\",\n      \"sap.chart\",\n      \"sap.collaboration\",\n      \"sap.f\",\n      \"sap.fe\",\n      \"sap.fileviewer\",\n      \"sap.gantt\",\n      \"sap.landvisz\",\n      \"sap.m\",\n      \"sap.ndc\",\n      \"sap.ovp\",\n      \"sap.rules\",\n      \"sap.suite\",\n      \"sap.tnt\",\n      \"sap.ui\",\n      \"sap.uiext\",\n      \"sap.ushell\",\n      \"sap.uxap\",\n      \"sap.viz\",\n      \"sap.webanalytics\",\n      \"sap.zen\"\n    ];\n    function getKeys(libOrComp,libOrCompKeysString) {\n      Object.keys(libOrComp).forEach(function (libOrCompKey) {\n        // ignore libs or Components that start with SAPUI5 delivered namespaces\n        if (!ui5Libs.some(function (substring) { return libOrCompKey === substring || libOrCompKey.startsWith(substring + \".\"); })) {\n          if (libOrCompKeysString.length > 0) {\n            libOrCompKeysString = libOrCompKeysString + \",\" + libOrCompKey;\n          } else {\n            libOrCompKeysString = libOrCompKey;\n          }\n        }\n      });\n      return libOrCompKeysString;\n    }\n    return new Promise(function (resolve, reject) {\n      $.ajax(url)\n        .done(function (manifest) {\n          if (manifest) {\n            if (\n              manifest[\"sap.ui5\"] &&\n              manifest[\"sap.ui5\"].dependencies\n            ) {\n              if (manifest[\"sap.ui5\"].dependencies.libs){\n                result = getKeys(manifest[\"sap.ui5\"].dependencies.libs, result)\n              }\n              if (manifest[\"sap.ui5\"].dependencies.components){\n                result = getKeys(manifest[\"sap.ui5\"].dependencies.components, result)\n              }\n            }\n            if (\n              manifest[\"sap.ui5\"] &&\n              manifest[\"sap.ui5\"].componentUsages\n            ) {\n              result = getKeys(manifest[\"sap.ui5\"].componentUsages, result)\n            }\n          }\n          resolve(result);\n        })\n        .fail(function (error) {\n          reject(new Error(\"Could not fetch manifest at '\" + manifestPath));\n        });\n    });\n  };\n  /**\n   * Registers the module paths for dependencies of the given component.\n   * @param {string} manifestPath The the path to the app manifest path\n   * for which the dependencies should be registered.\n   * @returns {Promise} A promise which is resolved when the ajax request for\n   * the app-index was successful and the module paths were registered.\n   */\n  sap.registerComponentDependencyPaths = function (manifestPath) {\n    /*eslint-disable semi, consistent-return*/\n    return fioriToolsGetManifestLibs(manifestPath).then(function (libs) {\n      if (libs && libs.length > 0) {\n        var url = \"/sap/bc/ui2/app_index/ui5_app_info?id=\" + libs;\n        var sapClient = jQuery.sap.getUriParameters().get(\"sap-client\");\n        if (sapClient && sapClient.length === 3) {\n          url = url + \"&sap-client=\" + sapClient;\n        }\n        return $.ajax(url).done(function (data) {\n          if (data) {\n            Object.keys(data).forEach(function (moduleDefinitionKey) {\n              var moduleDefinition = data[moduleDefinitionKey];\n              if (moduleDefinition && moduleDefinition.dependencies) {\n                moduleDefinition.dependencies.forEach(function (dependency) {\n                  if (dependency.url && dependency.url.length > 0 && dependency.type === \"UI5LIB\") {\n                    jQuery.sap.log.info(\n                      \"Registering Library \" +\n                      dependency.componentId +\n                      \" from server \" +\n                      dependency.url\n                    );\n                    jQuery.sap.registerModulePath(dependency.componentId, dependency.url);\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n})(sap);\n\n/*eslint-disable sap-browser-api-warning, sap-no-dom-access*/\nvar scripts = document.getElementsByTagName(\"script\");\nvar currentScript = document.getElementById('locate-reuse-libs');\nif(!currentScript){\n    currentScript = document.currentScript;\n};\nvar manifestUri = currentScript.getAttribute(\"data-sap-ui-manifest-uri\");\nvar componentName = currentScript.getAttribute(\"data-sap-ui-componentName\");\nvar useMockserver = currentScript.getAttribute(\"data-sap-ui-use-mockserver\");\nsap.registerComponentDependencyPaths(manifestUri)\n  .catch(function (error) {\n    jQuery.sap.log.error(error);\n  })\n  .finally(function () {\n\n    // setting the app title with internationalization\n    sap.ui.getCore().attachInit(function () {\n      jQuery.sap.require(\"jquery.sap.resources\");\n      var sLocale = sap.ui.getCore().getConfiguration().getLanguage();\n      var oBundle = jQuery.sap.resources({\n        url: \"i18n/i18n.properties\",\n        locale: sLocale\n      });\n      document.title = oBundle.getText(\"appTitle\");\n    });\n\n    if (componentName && componentName.length > 0) {\n      if (useMockserver && useMockserver === \"true\") {\n        sap.ui.getCore().attachInit(function () {\n          sap.ui.require([componentName.replace(/\\./g, \"/\") + \"/localService/mockserver\"], function (server) {\n            // set up test service for local testing\n            server.init();\n            // initialize the ushell sandbox component\n            sap.ushell.Container.createRenderer().placeAt(\"content\");\n          });\n        });\n      } else {\n        // Requiring the ComponentSupport module automatically executes the component initialisation for all declaratively defined components\n        sap.ui.require([\"sap/ui/core/ComponentSupport\"]);\n\n        // setting the app title with the i18n text\n        sap.ui.getCore().attachInit(function () {\n          jQuery.sap.require(\"jquery.sap.resources\");\n          var sLocale = sap.ui.getCore().getConfiguration().getLanguage();\n          var oBundle = jQuery.sap.resources({\n            url: \"i18n/i18n.properties\",\n            locale: sLocale\n          });\n          document.title = oBundle.getText(\"appTitle\");\n        });\n      }\n    } else {\n      sap.ui.getCore().attachInit(function () {\n        // initialize the ushell sandbox component\n        sap.ushell.Container.createRenderer().placeAt(\"content\");\n      });\n    }\n  });\n\nsap.registerComponentDependencyPaths(manifestUri);\n",
	"sap/ui/demo/iconexplorer/view/App.view.xml": "<mvc:View controllerName=\"test.offlineapp.controller.App\" xmlns:mvc=\"sap.ui.core.mvc\" displayBlock=\"true\" xmlns=\"sap.m\">\n    <Shell id=\"shell\">\n        <App id=\"app\" autoFocus=\"false\" />\n    </Shell>\n</mvc:View>\n",
	"sap/ui/demo/iconexplorer/view/Main.view.xml": "<mvc:View\r\n\tcontrollerName=\"test.offlineapp.controller.Main\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns=\"sap.m\"\r\n\tdisplayBlock=\"true\"\r\n\theight=\"100%\"\r\n\tbusyIndicatorDelay=\"0\"\r\n>\r\n<Page title=\"Hello World\">\r\n<content>\r\n\t<List items=\"{ path: 'customers>/' }\" growing=\"true\">\r\n\t \t<headerToolbar>\r\n\t\t\t<Toolbar>\r\n\t\t\t\t<Title text=\"Customers...\" ></Title>\r\n\t\t\t\t<ToolbarSpacer />\r\n\t\t\t\t<Button icon=\"sap-icon://inbox\" press=\"onSaveLocal\" />\r\n\t\t\t\t<Button icon=\"sap-icon://outbox\" press=\"onLoadLocal\" />\r\n\t\t\t</Toolbar>\r\n\t\t</headerToolbar>\r\n\t\t<StandardListItem title=\"{customers>ContactName}\" />\r\n\t</List>\r\n</content>\r\n</Page>\r\n</mvc:View>",
	"sap/ui/demo/iconexplorer/view/Splash.view.xml": "<mvc:View controllerName=\"test.offlineapp.controller.Splash\" xmlns:mvc=\"sap.ui.core.mvc\" displayBlock=\"true\"\n    xmlns=\"sap.m\" >\n    <FlexBox alignItems=\"Center\" justifyContent=\"Center\" height=\"100%\"> \n        <Image src=\"{img>/pic}\" height=\"{img>/height}\" />\n    </FlexBox>\n</mvc:View>\n",
	"sap/ui/demo/iconexplorer/i18n/i18n_en.properties": "# This is the resource bundle for test.offlineapp\n\n#Texts for manifest.json\n\n#XTIT: Application name\nappTitle=Offline App\n\n#YDES: Application description\nappDescription=A Fiori offline application.\r\n#XTIT: Main view title\ntitle=Offline App",
	"sap/ui/demo/iconexplorer/i18n/i18n.properties": "# This is the resource bundle for test.offlineapp\n\n#Texts for manifest.json\n\n#XTIT: Application name\nappTitle=Offline App\n\n#YDES: Application description\nappDescription=A Fiori offline application.\r\n#XTIT: Main view title\ntitle=Offline App",
	"sap/ui/demo/iconexplorer/manifest.json": "{\n  \"_version\": \"1.40.0\",\n  \"sap.app\": {\n    \"id\": \"test.offlineapp\",\n    \"type\": \"application\",\n    \"i18n\": \"i18n/i18n.properties\",\n    \"applicationVersion\": {\n      \"version\": \"0.0.1\"\n    },\n    \"serviceWorker\": {\n      \"file\": \"sw.js\",\n      \"config\": [\n        {\n          \"url\": \"https://localhost:8100\",\n          \"type\": \"application\"\n        },\n        {\n          \"url\": \"https://localhost:8100/resources\",\n          \"type\": \"ui5resource\",\n          \"priority\": 1\n        },\n        {\n          \"url\": \"https://openui5.hana.ondemand.com/resources\",\n          \"type\": \"ui5resource\"\n        }\n      ]\n    },\n    \"title\": \"{{appTitle}}\",\n    \"description\": \"{{appDescription}}\",\n    \"resources\": \"resources.json\",\n    \"sourceTemplate\": {\n      \"id\": \"@sap-ux/fiori-freestyle-writer:basic\",\n      \"version\": \"0.11.15\",\n      \"toolsId\": \"7551c045-6087-4581-8643-b4ebf93bf367\"\n    },\n    \"dataSources\": {}\n  },\n  \"sap.ui\": {\n    \"technology\": \"UI5\",\n    \"icons\": {\n      \"icon\": \"\",\n      \"favIcon\": \"\",\n      \"phone\": \"\",\n      \"phone@2\": \"\",\n      \"tablet\": \"\",\n      \"tablet@2\": \"\"\n    },\n    \"deviceTypes\": {\n      \"desktop\": true,\n      \"tablet\": true,\n      \"phone\": true\n    }\n  },\n  \"sap.ui5\": {\n    \"flexEnabled\": false,\n    \"dependencies\": {\n      \"minUI5Version\": \"1.112.1\",\n      \"libs\": {\n        \"sap.m\": {},\n        \"sap.ui.core\": {},\n        \"sap.f\": {},\n        \"sap.suite.ui.generic.template\": {},\n        \"sap.ui.comp\": {},\n        \"sap.ui.generic.app\": {},\n        \"sap.ui.table\": {},\n        \"sap.ushell\": {}\n      }\n    },\n    \"contentDensities\": {\n      \"compact\": true,\n      \"cozy\": true\n    },\n    \"models\": {\n      \"i18n\": {\n        \"type\": \"sap.ui.model.resource.ResourceModel\",\n        \"settings\": {\n          \"bundleName\": \"test.offlineapp.i18n.i18n\"\n        }\n      }\n    },\n    \"resources\": {\n      \"css\": [\n        {\n          \"uri\": \"css/style.css\"\n        }\n      ]\n    },\n    \"routing\": {\n      \"config\": {\n        \"routerClass\": \"sap.m.routing.Router\",\n        \"viewType\": \"XML\",\n        \"async\": true,\n        \"viewPath\": \"test.offlineapp.view\",\n        \"controlAggregation\": \"pages\",\n        \"controlId\": \"app\",\n        \"clearControlAggregation\": false\n      },\n      \"routes\": [\n        {\n          \"name\": \"splashScreen\",\n          \"pattern\": \"\",\n          \"target\": [\n            \"splashScreen\"\n          ]\n        },\n        {\n          \"name\": \"main\",\n          \"pattern\": \"main\",\n          \"target\": [\n            \"main\"\n          ]\n        }\n      ],\n      \"targets\": {\n        \"splashScreen\": {\n          \"viewType\": \"XML\",\n          \"transition\": \"slide\",\n          \"clearControlAggregation\": false,\n          \"viewId\": \"Splash\",\n          \"viewName\": \"Splash\"\n        },\n        \"main\": {\n          \"viewType\": \"XML\",\n          \"transition\": \"slide\",\n          \"clearControlAggregation\": false,\n          \"viewId\": \"Main\",\n          \"viewName\": \"Main\"\n        }\n      }\n    },\n    \"rootView\": {\n      \"viewName\": \"test.offlineapp.view.App\",\n      \"type\": \"XML\",\n      \"async\": true,\n      \"id\": \"App\"\n    }\n  }\n}"
}, "sap/ui/demo/iconexplorer/Component-preload");